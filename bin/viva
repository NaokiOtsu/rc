#!/usr/bin/env perl

use strict;
use warnings;

use Getopt::Compact::WithCmd;

use File::Temp qw/tempdir/;
use File::Copy::Recursive qw/dircopy/;
use File::Path qw/rmtree/;
use File::Inplace;

use Term::ANSIColor qw/:constants/;

use LWP;
use JSON;
use Data::Util qw/:check/;


my $go = Getopt::Compact::WithCmd->new( modes => [ qw/verbose/ ],
  global_struct => [
    [ [qw/d dest/], 'destination directory (vim home)', '=s', \my $vim_home, { default => "$ENV{HOME}/.vim"} ]
  ],
  command_struct => {
    init => {
      desc => 'initialize pathogen + git submodule vim plugin management environment.'
    },
    search => {
      desc => 'search and install vim plugins by github'
    },
    list => {
      desc => 'list all installed plugins'
    },
    remove => {
      desc => 'remove installed plugin'
    },
    update => {
      desc => 'update all installed plugins'
    },
  }
);

my $opts = $go->opts;
my $cmd = $go->command || 'search';

&main; exit;

sub main {
  __PACKAGE__->can($cmd)->();
}


# init

sub init {
  my $tmpdir = tempdir(CLEANUP => 1);
  system("git clone git://github.com/tpope/vim-pathogen.git $tmpdir/pathogen");
  dircopy("$tmpdir/pathogen", $vim_home);
  rmtree "$vim_home/.git";
  print "not forget to add `call pathogen#runtime_append_all_bundles` line to your .vimrc (:\n";
}


# search -> install

sub search {
  my $query = shift @ARGV;
  my $url = "http://github.com/api/v2/json/repos/search/$query?language=VimL";
  my $ua = LWP::UserAgent->new;
  my $req = HTTP::Request->new(GET => $url);
  my $res = $ua->request($req);

  if ( $res->is_success ) {

    my $json = decode_json($res->content);
    my $repositories = $json->{repositories};

    if ( is_array_ref($repositories) ) {
      $repositories = [sort { $b->{followers} <=> $a->{followers} } @$repositories];
      my $repos_num = _print_repos($repositories);

      return if $repos_num == 0;
      _run_term($repositories, $repos_num);
    }
    else {
      die "github response includes error, please try it again after a while: $json->{error}->{error}";
    }
  }
  else {
    die "github returns http error, please try it again after a while: $res->code";
  }
}

sub _print_repos {
  my $repositories = shift;

  return 0 if scalar @$repositories == 0;

  #my @installed_repo_ids = keys %{Viyond::InstallData::Metadata->load_all};
  my @installed_repo_ids = ();

  $Term::ANSIColor::AUTORESET = 1;
  my $repos_num = 1;

  for my $repository (@$repositories) {

    next if $repository->{name} =~ /^\.?vim$|(dot|vim)files|dotvim|conf(ig)?/i;

    print BOLD WHITE ON_BLUE $repos_num;
    print " ";
    print BOLD WHITE "$repository->{username}/";
    print BOLD CYAN $repository->{name};
    if ( grep { $_ eq "$repository->{name}-$repository->{id}" } @installed_repo_ids ) {
      print " ";
      print BOLD WHITE ON_MAGENTA "[installed]";
    }
    print " (";
    print BOLD GREEN "followers: ";
    print "$repository->{followers},";
    print " ";
    print BOLD GREEN "pushed: ";
    $repository->{pushed} =~ s/T.*$//;
    print "$repository->{pushed},";
    print " ";
    print BOLD GREEN "url: ";
    print "http://github.com/$repository->{username}/$repository->{name}";
    print ")\n";
    print " " x 6;
    print $repository->{description};
    print "\n";
    $repos_num++;
  }

  print "\n";
  print BOLD YELLOW "==> ";
  print BOLD WHITE "Enter n (seperated by blanks) of vim plugins to be installed\n";
  print BOLD YELLOW "==> ";

  return $repos_num;
}

sub _run_term {
  my ($repositories, $repos_num) = @_;

  my $command = <STDIN>;
  my @numbers = split / /, $command;

  for my $number (@numbers) {
    if ( $number =~ /\d+/ && grep { $_ == $number } ( 1 .. $repos_num ) ) {
      _install($repositories->[$number - 1]);
      print "\n";
    }
  }
}

sub _install {
  my $repository = shift;
  my $git_uri = "git://github.com/$repository->{username}/$repository->{name}.git";
  system("git submodule add $git_uri $vim_home/bundle/$repository->{name}");
  system("git submodule init");
}


# remove

sub remove {
  my $name = shift @ARGV;
  my $gitmodules = "$ENV{HOME}/.gitmodules";
  my $gitconfig = "$ENV{HOME}/.git/config";
  _remove_submodule_info($gitmodules);
  _remove_submodule_info($gitconfig);
  system("git rm --cached $vim_home/bundle/$name");
  rmtree("$vim_home/bundle/$name");
}

sub _remove_submodule_info {
  my $filename = shift;
  my $editor = File::Inplace->new(file => $filename);
  my $git_id;
  while ( my ($line) = $editor->next_line ) {
    $editor->replace_line($line =~ s/^.*?$name.*?\n//);
  }
}


# list

sub list {
  my @lines = `git submodule status`;

  for my $line (@lines) {
    my @parts = split / (?!\()/, $line;
    print $parts[-1];
  }
}


# update

sub update {
  # just update
  system("git submodule update");
}
